<?php

namespace Proxies\__CG__\Zepluf\Bundle\StoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class InventoryItem extends \Zepluf\Bundle\StoreBundle\Entity\InventoryItem implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setSerial($serial)
    {
        $this->__load();
        return parent::setSerial($serial);
    }

    public function getSerial()
    {
        $this->__load();
        return parent::getSerial();
    }

    public function setQuantityOnhand($quantityOnhand)
    {
        $this->__load();
        return parent::setQuantityOnhand($quantityOnhand);
    }

    public function getQuantityOnhand()
    {
        $this->__load();
        return parent::getQuantityOnhand();
    }

    public function setProduct(\Zepluf\Bundle\StoreBundle\Entity\Product $product = NULL)
    {
        $this->__load();
        return parent::setProduct($product);
    }

    public function getProduct()
    {
        $this->__load();
        return parent::getProduct();
    }

    public function setInventoryItemStatusType(\Zepluf\Bundle\StoreBundle\Entity\InventoryItemStatusType $inventoryItemStatusType = NULL)
    {
        $this->__load();
        return parent::setInventoryItemStatusType($inventoryItemStatusType);
    }

    public function getInventoryItemStatusType()
    {
        $this->__load();
        return parent::getInventoryItemStatusType();
    }

    public function setContainer(\Zepluf\Bundle\StoreBundle\Entity\Container $container = NULL)
    {
        $this->__load();
        return parent::setContainer($container);
    }

    public function getContainer()
    {
        $this->__load();
        return parent::getContainer();
    }

    public function setLot(\Zepluf\Bundle\StoreBundle\Entity\Lot $lot = NULL)
    {
        $this->__load();
        return parent::setLot($lot);
    }

    public function getLot()
    {
        $this->__load();
        return parent::getLot();
    }

    public function setFacility(\Zepluf\Bundle\StoreBundle\Entity\Facility $facility = NULL)
    {
        $this->__load();
        return parent::setFacility($facility);
    }

    public function getFacility()
    {
        $this->__load();
        return parent::getFacility();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'serial', 'quantityOnhand', 'product', 'inventoryItemStatusType', 'container', 'lot', 'facility');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}