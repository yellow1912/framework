<?php

namespace Proxies\__CG__\Zepluf\Bundle\StoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Shipment extends \Zepluf\Bundle\StoreBundle\Entity\Shipment implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setIncrementId($incrementId)
    {
        $this->__load();
        return parent::setIncrementId($incrementId);
    }

    public function getIncrementId()
    {
        $this->__load();
        return parent::getIncrementId();
    }

    public function setEstimatedShipDate($estimatedShipDate)
    {
        $this->__load();
        return parent::setEstimatedShipDate($estimatedShipDate);
    }

    public function getEstimatedShipDate()
    {
        $this->__load();
        return parent::getEstimatedShipDate();
    }

    public function setEstimatedReadyDate($estimatedReadyDate)
    {
        $this->__load();
        return parent::setEstimatedReadyDate($estimatedReadyDate);
    }

    public function getEstimatedReadyDate()
    {
        $this->__load();
        return parent::getEstimatedReadyDate();
    }

    public function setEstimatedShipCost($estimatedShipCost)
    {
        $this->__load();
        return parent::setEstimatedShipCost($estimatedShipCost);
    }

    public function getEstimatedShipCost()
    {
        $this->__load();
        return parent::getEstimatedShipCost();
    }

    public function setActualShipCost($actualShipCost)
    {
        $this->__load();
        return parent::setActualShipCost($actualShipCost);
    }

    public function getActualShipCost()
    {
        $this->__load();
        return parent::getActualShipCost();
    }

    public function setTotalWeight($totalWeight)
    {
        $this->__load();
        return parent::setTotalWeight($totalWeight);
    }

    public function getTotalWeight()
    {
        $this->__load();
        return parent::getTotalWeight();
    }

    public function setHandlingInstructions($handlingInstructions)
    {
        $this->__load();
        return parent::setHandlingInstructions($handlingInstructions);
    }

    public function getHandlingInstructions()
    {
        $this->__load();
        return parent::getHandlingInstructions();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setShipmentType(\Zepluf\Bundle\StoreBundle\Entity\ShipmentType $shipmentType = NULL)
    {
        $this->__load();
        return parent::setShipmentType($shipmentType);
    }

    public function getShipmentType()
    {
        $this->__load();
        return parent::getShipmentType();
    }

    public function setShippedFromParty(\Zepluf\Bundle\StoreBundle\Entity\Party $shippedFromParty = NULL)
    {
        $this->__load();
        return parent::setShippedFromParty($shippedFromParty);
    }

    public function getShippedFromParty()
    {
        $this->__load();
        return parent::getShippedFromParty();
    }

    public function setShippedToParty(\Zepluf\Bundle\StoreBundle\Entity\Party $shippedToParty = NULL)
    {
        $this->__load();
        return parent::setShippedToParty($shippedToParty);
    }

    public function getShippedToParty()
    {
        $this->__load();
        return parent::getShippedToParty();
    }

    public function setShippedFromContactMechanism(\Zepluf\Bundle\StoreBundle\Entity\ContactMechanism $shippedFromContactMechanism = NULL)
    {
        $this->__load();
        return parent::setShippedFromContactMechanism($shippedFromContactMechanism);
    }

    public function getShippedFromContactMechanism()
    {
        $this->__load();
        return parent::getShippedFromContactMechanism();
    }

    public function setShippedToContactMechanism(\Zepluf\Bundle\StoreBundle\Entity\ContactMechanism $shippedToContactMechanism = NULL)
    {
        $this->__load();
        return parent::setShippedToContactMechanism($shippedToContactMechanism);
    }

    public function getShippedToContactMechanism()
    {
        $this->__load();
        return parent::getShippedToContactMechanism();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'incrementId', 'estimatedShipDate', 'estimatedReadyDate', 'estimatedShipCost', 'actualShipCost', 'totalWeight', 'handlingInstructions', 'createdAt', 'updatedAt', 'shipmentType', 'shippedFromParty', 'shippedToParty', 'shippedFromContactMechanism', 'shippedToContactMechanism');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}