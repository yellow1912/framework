<?php

namespace Proxies\__CG__\Zepluf\Bundle\StoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Invoice extends \Zepluf\Bundle\StoreBundle\Entity\Invoice implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setEntryDate($entryDate)
    {
        $this->__load();
        return parent::setEntryDate($entryDate);
    }

    public function getEntryDate()
    {
        $this->__load();
        return parent::getEntryDate();
    }

    public function setMessage($message)
    {
        $this->__load();
        return parent::setMessage($message);
    }

    public function getMessage()
    {
        $this->__load();
        return parent::getMessage();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function addTermType(\Zepluf\Bundle\StoreBundle\Entity\TermType $termType)
    {
        $this->__load();
        return parent::addTermType($termType);
    }

    public function removeTermType(\Zepluf\Bundle\StoreBundle\Entity\TermType $termType)
    {
        $this->__load();
        return parent::removeTermType($termType);
    }

    public function getTermType()
    {
        $this->__load();
        return parent::getTermType();
    }

    public function setBilledTo(\Zepluf\Bundle\StoreBundle\Entity\Party $billedTo = NULL)
    {
        $this->__load();
        return parent::setBilledTo($billedTo);
    }

    public function getBilledTo()
    {
        $this->__load();
        return parent::getBilledTo();
    }

    public function setBilledFrom(\Zepluf\Bundle\StoreBundle\Entity\Party $billedFrom = NULL)
    {
        $this->__load();
        return parent::setBilledFrom($billedFrom);
    }

    public function getBilledFrom()
    {
        $this->__load();
        return parent::getBilledFrom();
    }

    public function setAddressedTo(\Zepluf\Bundle\StoreBundle\Entity\ContactMechanism $addressedTo = NULL)
    {
        $this->__load();
        return parent::setAddressedTo($addressedTo);
    }

    public function getAddressedTo()
    {
        $this->__load();
        return parent::getAddressedTo();
    }

    public function setSentTo(\Zepluf\Bundle\StoreBundle\Entity\ContactMechanism $sentTo = NULL)
    {
        $this->__load();
        return parent::setSentTo($sentTo);
    }

    public function getSentTo()
    {
        $this->__load();
        return parent::getSentTo();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'entryDate', 'message', 'description', 'termType', 'billedTo', 'billedFrom', 'addressedTo', 'sentTo');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}